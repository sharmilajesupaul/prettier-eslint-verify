#! /usr/bin/env node
const chalk = require('chalk');
const { exec } = require('child_process');
const glob = require('glob');

const commandLineArgs = require('command-line-args');
const optionDefinitions = [{ name: 'src', type: String, multiple: true, defaultOption: true }];
const options = commandLineArgs(optionDefinitions, { partial: true });

const error = chalk.red;
const warning = chalk.yellow;
const success = chalk.green;

if (!options.src) {
  console.log(error('No files were provided.'));
  process.exit(1);
}

const formattedOptions = options.src.map(arg => `'${arg.split(' ')}'`).join(' ');

function createCommand() {
  return `npx prettier-eslint --list-different ${
    options._unknown ? options._unknown.join(' ') : ''
  } ${formattedOptions}`;
}

const command = createCommand();

exec(command, (err, stdout, stderr) => {
  const filePaths = stdout
    .trim()
    .split('\n')
    .filter(file => file !== '' || file.startsWith === '>');

  let info = '';

  if (filePaths.length > 0) {
    const stderrLines = stderr.split('\n');
    if (stderrLines.length > 1 && stderrLines[0].includes('success')) {
      const numberChanged = stderrLines[0].match(/\d+/)[0];
      const numberUnChanged = stderrLines[1].match(/\d+/)[0];
      info = `${numberChanged}/${parseInt(numberUnChanged) + parseInt(numberChanged)} files need to be updated`;
    }

    throw new Error(`
      ${error('Found prettier eslint diffs:')}
      ${warning(info)}

      Please run \`npx prettier-eslint --write ${formattedOptions}\` to fix this error.
    `);
    return;
  }

  if (
    stderr &&
    (stderr.includes('files were unchanged') || stderr.includes('file was unchanged'))
  ) {
    console.log(success('âœ… did not find diffs in checked files.'));
    return;
  }

  if (err) {
    throw new Error(err);
  }
});
